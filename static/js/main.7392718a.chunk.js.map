{"version":3,"sources":["componentes/card-component/Card.component.jsx","componentes/create-Context/appContext.js","componentes/card-list/cardList.component.jsx","componentes/search-box-component/searchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","height","width","name","email","appContext","React","createContext","CardList","monsters","useContext","MonsterContext","result","map","SearchInput","text","setText","console","log","type","placeholder","value","onChange","e","target","App","useState","setMonsters","useEffect","fetch","then","response","json","user","filter","toLowerCase","includes","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAGMA,G,YAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACX,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,aAAiDC,IAAI,UAAUC,OAAQ,IAAKC,MAAO,MAC3F,6BAAKN,EAAQO,OACb,6BAAKP,EAAQQ,aCLRC,EAAaC,IAAMC,gBCGpBC,EAAW,WAAM,IACPC,EAAUC,qBAAWC,GAA5BC,OACL,OACE,qBAAKf,UAAU,YAAf,SAEGY,EAASI,KAAI,SAACjB,GAAD,OAAc,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,UCNjDe,G,MAAc,WAAM,IAAD,EAEDJ,qBAAWC,GAA1BI,EAFgB,EAEhBA,KAAKC,EAFW,EAEXA,QAEZ,OADAC,QAAQC,IAAIH,GAEZ,sBAAKlB,UAAU,SAAf,UACA,iDACE,uBACEA,UAAU,SACVsB,KAAK,SACLC,YAAY,iBACZC,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAAQO,EAAEC,OAAOH,eCmBzBI,G,MA7BH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTjB,EADS,KACCkB,EADD,OAEQD,mBAAS,IAFjB,mBAETX,EAFS,KAEHC,EAFG,KAIhBY,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUN,EAAYM,QAC7B,IAQH,IAAMrB,EAASH,EAASyB,QAAO,SAACtC,GAAD,OAC7BA,EAAQO,KAAKgC,cAAcC,SAASrB,EAAKoB,kBAG3C,OACE,eAAC,EAAeE,SAAhB,CAAyBhB,MAAO,CAACT,SAAOG,OAAKC,WAA7C,UAEE,cAAC,EAAD,IACA,cAAC,EAAD,SClBSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7392718a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\n\r\nconst Card = ({monster}) => (\r\n  <div className='card-container'>\r\n  <img src={`https://robohash.org/${monster.id}?set=set2`} alt='Monster' height={180} width={180}/>\r\n  <h1>{monster.name}</h1>\r\n  <h2>{monster.email}</h2>\r\n    </div>\r\n    );\r\n\r\n\r\nexport { Card as default };\r\n","import React from 'react';\r\n\r\n const appContext = React.createContext();\r\n\r\n export{appContext as default};","import React,{useContext} from 'react';\r\nimport './cardlist.styles.css';\r\nimport Card from \"../card-component/Card.component\";\r\nimport MonsterContext from '../create-Context/appContext';\r\n\r\nconst CardList = () =>{\r\n  const {result:monsters}=useContext(MonsterContext);\r\n    return (\r\n      <div className=\"card-list\">\r\n      \r\n        {monsters.map((monster) =>  <Card key={monster.id} monster={monster} />\r\n        )}\r\n      </div>\r\n    );\r\n\r\n}\r\nexport {CardList as default}","import React,{useContext} from \"react\";\r\nimport './searchBox-styles.css';\r\nimport MonsterContext from '../create-Context/appContext';\r\n\r\nconst SearchInput = () =>{ \r\n  \r\n  const {text,setText} =useContext(MonsterContext);\r\n  console.log(text);\r\n  return (\r\n  <div className='center'>\r\n  <h1>Monster Roledex</h1>\r\n    <input\r\n      className=\"search\"\r\n      type=\"serach\"\r\n      placeholder=\"Serach Monster\"\r\n      value={text}\r\n      onChange={(e) => setText(e.target.value)}\r\n    />\r\n  </div>\r\n)};\r\n\r\nexport {SearchInput as default};","import React, { useState, useEffect } from \"react\";\nimport CardList from \"./componentes/card-list/cardList.component\";\nimport SearchInput from './componentes/search-box-component/searchBox.component';\nimport MonsterContext from \"./componentes/create-Context/appContext\";\nimport './app.css';\n\nconst App = () => {\n  const [monsters, setMonsters] = useState([]);\n  const [text, setText] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((user) => setMonsters(user));\n  }, []);\n\n \n\n  // useEffect(()=>{\n  //\n\n  // },[text])\n  const result = monsters.filter((monster) =>\n    monster.name.toLowerCase().includes(text.toLowerCase())\n  );\n\n  return (\n    <MonsterContext.Provider value={{result,text,setText}}>\n   \n      <SearchInput />\n      <CardList />\n    </MonsterContext.Provider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}